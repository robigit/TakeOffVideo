@using Microsoft.JSInterop
@using TakeOffVideo.Library.ModalDialog
@using TakeOffVideo.Library.TOVFileManagerNS;

@inject IJSRuntime JS

@inject TOVFileManager filemanager

@implements IAsyncDisposable
@implements IDisposable

@inject IStringLocalizer<LangResources> Loc



<div class="container">

    

    <div class="vmcontainer" @ref="_container" >
        <div class="vmvideo">
            <video width="@WidthVideo" height="@HeigthVideo" @ref="_video" preload="auto" playsInline />
        </div>

        @if (_lineavisibile)
        {
            <div class="vmlinea" @ref="_linea"></div>
        }
    </div>

    <section class="content">
    <nav class="level">

        <div class="level-left">
            <div class="level-item">
                <div class="buttons are-small">
                        <button class="button is-light" @onclick="@(() => MostraLinea())">
                            @*@_textlinea*@
                            <span class="icon is-small">
                            @if(_lineavisibile)
                            {
                                    <img src="image/hideline24.png">
                            }
                            else
                            {
                                    <img src="image/showline24.png">
                            }
                            </span>
                        </button>
                @if (_lineavisibile)
                {
                    <button class="button is-light" @onclick="@(() => Move("sx", 10))">
                        <span class="icon is-small">
                            <img src="image/dopchevronleft24.png">
                        </span>
                    </button>

                    <button class="button is-light" @onclick="@(() => Move("sx", 1))">
                        <span class="icon is-small">
                            <img src="image/chevronleft24.png">
                        </span>
                    </button>

                            <button class="button is-light" @onclick="@(() => Move("dx", 1))">
                        <span class="icon is-small">
                            <img src="image/chevronright24.png">
                        </span>
                    </button>

                            <button class="button is-light" @onclick="@(() => Move("dx", 10))">
                        <span class="icon is-small">
                            <img src="image/dopchevronright24.png">
                        </span>
                    </button>
                }
            </div>
            </div>
        </div>
         @if (!ConRecorder)
        {
                <div class="level-right">
                       @* <p class="level-item">
                       
                            <strong>Frames</strong>
                        </p>*@
                    <div class="level-item">
                        <div class="buttons are-small">

                            <button class="button is-light" >
                                <span class="icon is-small">
                                    <img src="image/slider24.png">
                                </span>
                            </button>

                            <button class="button is-light" @onclick="@(() => AdvanceFrame(-10))">
                            <span class="icon is-small">
                                <img src="image/dopchevronleft24.png">
                            </span>
                        </button>

                            <button class="button is-light" @onclick="@(() => AdvanceFrame(-2))">
                            <span class="icon is-small">
                                <img src="image/chevronleft24.png">
                            </span>
                        </button>

                            <button class="button is-light" @onclick="@(() => AdvanceFrame(2))">
                            <span class="icon is-small">
                                <img src="image/chevronright24.png">
                            </span>
                        </button>


                            <button class="button is-light" @onclick="@(() => AdvanceFrame(10))">
                            <span class="icon is-small">
                                <img src="image/dopchevronright24.png">
                            </span>
                        </button>
                            @if (ConZoom)
                            {
                                <button class="button is-light" @onclick="ZoomClick">
                                    <span class="icon is-small">
                                        <img src="image/zoom24.png">
                                    </span>
                                </button>
                            }
                            @if (ConImageRec)
                            {
                                <button class="button is-light" @onclick="GetImageClick">
                                    <span class="icon is-small">
                                        <img src="image/getimage24.png">
                                    </span>
                                </button>
                            }
                            @* <button class="button" @onclick="@(() => SettaCurrentTime(6.415))">
                            <span class="icon is-small">
                                <img src="image/dopchevronright24.png">
                            </span>
                        </button>*@
                    </div>
                </div>
            </div>
        }
    </nav>
    </section>

    @if (ConRecorder)
    {
        <div class="columns is-1">
            <div class="column is-10">
                <button @ref="_startstopbutton" class="button is-fullwidth @(_inregistrazione ? "is-danger" : "is-primary")"
                    @onclick="OnRegistra">
                    <span>    
                        @(
                           ( _inregistrazione ? Loc["Salva"] : Loc["Registra"])+ " "+(RegistrazioneContinua ?"(continua)" :"" )
                            )
                    </span>

                </button>
            </div>
            <div class="column">
                <button @ref="_cancelbutton" class="button is-primary">
                    <span>@Loc["Annulla"]</span>
                </button>
            </div>

        </div>
        @if(_inregistrazione)
        {
            <div class="container">
                    <progress class="progress is-danger" max="100">30%</progress>
                </div>
                <br />
        }
       
    }

    @if (!string.IsNullOrEmpty(_notifica))
    {
        
        <div class="notification is-danger">
            <button class="delete" @onclick="DelNotification"></button>
            @_notifica
        </div>
        
    }

    @if(FaiZoom)
    {
        <ModalZoom Url="@Url" OnClose="ChiudiDialog" />
    }



</div>



@code {

    private bool _lineavisibile = true;

    private string _textlinea => _lineavisibile ? Loc["Nascondi Linea"] : Loc["Mostra Linea"];

    private string _controls = "false";

    private IJSObjectReference? _JScript;
    private DotNetObjectReference<VideoMarker>? _reference;

    private ElementReference _video;
    private ElementReference _container;
    private ElementReference _linea;

    private ElementReference _startstopbutton;
    private ElementReference _cancelbutton;



    [Parameter] public string? Url { get; set; }
    [Parameter] public int WidthVideo { get; set; } = 320;
    [Parameter] public int HeigthVideo { get; set; } = 320;
    [Parameter] public bool ConRecorder { get; set; } = false;
    [Parameter] public bool ConControls { get; set; } = false;

    [Parameter] public bool ConImageRec { get; set; } = false;

    [Parameter] public EventCallback<string> OnImageRecorded { get; set; }

    [Parameter] public EventCallback<OnVideoRecordedArgs> OnVideoRecorded { get; set; }

    [Parameter] public bool RegistrazioneContinua { get; set; } = false;

    [Parameter] public bool FullScreen { get; set; } = false;

    [Parameter] public bool ConZoom { get; set; } = true;

    [Parameter] public int LinePosition { get; set; } = 0;


    

    private bool _inregistrazione = false;

    string? _notifica;

    bool FaiZoom = false;



    System.Timers.Timer? _timer;
    protected override void OnInitialized()
    {
        base.OnInitialized();


        if (ConRecorder && !RegistrazioneContinua)
        {
            _timer = new System.Timers.Timer(10000)
                {
                    AutoReset = false,
                    Enabled = false
                };
            _timer.Elapsed += async (source, e) =>
            {
                _timer.Enabled = false;
                if (_inregistrazione && _JScript != null)
                {
                    await _JScript.InvokeVoidAsync("pressbutton", _startstopbutton);
                }
            };
        }

    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _JScript = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/TakeOffVideo.Library/VideoMarker/VideoMarker.razor.js");
            _reference = DotNetObjectReference.Create(this);


            //await _JScript.InvokeVoidAsync("SettaControlsVideo", _video, ConControls);

            await _JScript.InvokeVoidAsync("SettaAttributeVideo", _video, "controls", ConControls);

            await _JScript.InvokeVoidAsync("SettaAttributeVideo", _video, "autoplay", ConRecorder);


            await _JScript.InvokeVoidAsync("InitKeyboard", _startstopbutton);


            if(FullScreen)
            {
                //await _JScript.InvokeVoidAsync("setfullscreen", _reference);

                var size = await _JScript.InvokeAsync<WindowDimension>("getvideosize");
                var dim = Math.Min(size.Height, size.Width)+150;
                HeigthVideo = dim;
                WidthVideo = dim;
                StateHasChanged();
            }


            if (Url != null && _JScript != null)
            {
                await _JScript.InvokeVoidAsync("caricavideo", _video, Url);
            }


            if (LinePosition != 0 && _JScript != null)
            {
                await _JScript.InvokeVoidAsync("setlineposition", _linea, LinePosition);
            }

        }
    }


    protected override async Task OnParametersSetAsync()
    {
        //Console.WriteLine($"carica video4 {Url} {(_JScript != null)} ");

        //if(Url != null && _JScript!=null)
        //{
        //    Console.WriteLine($"carica video3 {Url}");

        //    await _JScript.InvokeVoidAsync("caricavideo", _video, Url);

        //    Console.WriteLine($"carica video {Url}");
        //}
    }

    public async Task SetVideo(string url, TimeSpan? position=null)
    {
        Url = url;

        if (Url != null && _JScript != null)
        {
            await _JScript.InvokeVoidAsync("caricavideo", _video, Url);

            if(position.HasValue)
            {
                await _JScript.InvokeVoidAsync("SettaCurrentTime", _video, position.Value.TotalSeconds-2);
            }

            Console.WriteLine($"carica video2 {Url}");
        }

    }

    private void MostraLinea()
    {
        _lineavisibile = !_lineavisibile;
    }

    private async Task Move(string direction, int pixels)
    {
        if (_JScript == null)
            return;


        await _JScript.InvokeVoidAsync("move", direction, _container, _linea, pixels);
    }

    private async Task AdvanceFrame(int steps)
    {
        if (_JScript == null)
            return;


        await _JScript.InvokeVoidAsync("AdvanceFrame", _video, steps);
    }

    private async Task SettaCurrentTime(double secs)
    {
        if (_JScript == null)
            return;


        await _JScript.InvokeVoidAsync("SettaCurrentTime", _video, secs);
    }

    public async Task StartVideo(string camera)
    {
        if (_JScript == null)
            return;
        _cameraselected = camera;

        Console.WriteLine($"Inizio video {camera}");

        await _JScript.InvokeVoidAsync("startVideo", _video, camera);
    }


    string? _cameraselected;

    DateTime _startTime;
    TimeSpan _durata;

    private async Task OnRegistra()
    {
        if (_timer != null)
            _timer.Enabled = false;

        if (_JScript == null || string.IsNullOrEmpty(_cameraselected))
        {
            _notifica = "Selezionare una Videocamera";
            return;
        }
        _notifica = null;



        _inregistrazione = !_inregistrazione;


        if (_inregistrazione)
        {
            _startTime = DateTime.Now;

            Console.WriteLine($"Inizio Registrazione");

            await _JScript.InvokeVoidAsync("StartRec", _video, _startstopbutton, _cameraselected, _reference, _cancelbutton);
            if (_timer != null)
            {
                _timer.Enabled = true;
            }
        }
        else
        {
            _durata = DateTime.Now - _startTime;
        }

    }


    [JSInvokable]
    public async Task SalvaUrlVideo(string url, string tipo)
    {
        Console.WriteLine($"SalvaUrlVideo {url}");
        await OnVideoRecorded.InvokeAsync(new OnVideoRecordedArgs(url, tipo, _durata));

        if (RegistrazioneContinua && _JScript!=null)
            await _JScript.InvokeVoidAsync("pressbutton", _startstopbutton);
        //await filemanager.SalvaFileSuCartella("nome.webm", url);

    }

    [JSInvokable]
    public async Task CancelRec()
    {
        Console.WriteLine($"CancelRec");
        _inregistrazione = false;
        StateHasChanged();
    }

    public async Task<int> GetLinePosition()
    {
        return await _JScript.InvokeAsync<int>("getlineposition", _linea);
    }


    async Task ZoomClick()
    {

        FaiZoom = true;
        StateHasChanged();
    }


    async Task GetImageClick()
    {
        if (_JScript == null)
            return;

        await _JScript.InvokeVoidAsync("getCurrentCanvasFrame", _video, _reference, "ProcessImage");
    }


    [JSInvokable]
    public async Task ProcessImage(string imageString)
    {
        if(OnImageRecorded.HasDelegate)
            await OnImageRecorded.InvokeAsync(imageString);
    }


    void DelNotification()
    {
        _notifica = null;
    }

    private void ChiudiDialog()
    {
        FaiZoom = false;
    }

    void IDisposable.Dispose() => _reference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JScript is not null)
        {
            await _JScript.DisposeAsync();
        }
    }

}
