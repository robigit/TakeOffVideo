@using Microsoft.JSInterop
@using TakeOffVideo.Library.RLogger;

@inject IJSRuntime JS
@inject IRLogger _logger

@implements IAsyncDisposable
@implements IDisposable




<div class="container">

    

    <div class="vmcontainer" @ref="_container" >
        <div class="vmvideo">
            <video  width="@WidthVideo" height="@HeigthVideo" @ref="_video" preload="auto" playsInline autoplay  />
        </div>

        @if (_lineavisibile)
        {
            <div class="vmlinea" @ref="_linea"></div>
        }
    </div>


    <div class="buttons are-small">
        <button class="button" @onclick="@(() => MostraLinea())">
            @_textlinea
        </button>
        @if (_lineavisibile)
        {
            <button class="button" @onclick="@(() => Move("sx", 10))">
                <span class="icon is-small">
                    <img src="image/dopchevronleft24.png">
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("sx", 1))">
                <span class="icon is-small">
                    <img src="image/chevronleft24.png">
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("dx", 1))">
                <span class="icon is-small">
                    <img src="image/chevronright24.png">
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("dx", 10))">
                <span class="icon is-small">
                    <img src="image/dopchevronright24.png">
                </span>
            </button>
        }
    </div>

    @if (ConRecorder)
    {
        <p class="buttons">
            <button @ref="_stopbutton" class="button is-fullwidth   @(_inregistrazione ? "is-danger" : "is-primary")"
        @onclick="OnRegistra">
                <span>    
                    @(
                        _inregistrazione ? "Salva" : "Registra"
                        )
                </span>

            </button>
        </p>
        @if(_inregistrazione)
        {
            <div class="container">
                    <progress class="progress is-danger" max="100">30%</progress>
                </div>
                <br />
        }
       
    }

    @if (!string.IsNullOrEmpty(_notifica))
    {
        
        <div class="notification is-danger">
            <button class="delete" @onclick="DelNotification"></button>
            @_notifica
        </div>
        
    }
</div>



@code {

    private bool _lineavisibile = true;

    private string _textlinea => _lineavisibile ? "Nascondi Linea" : "Mostra Linea";

    private string _controls = "false";

    private IJSObjectReference? _JScript;
    private DotNetObjectReference<VideoMarker>? _reference;

    private ElementReference _video;
    private ElementReference _container;
    private ElementReference _linea;

    private ElementReference _stopbutton;



    [Parameter] public string? Url { get; set; }
    [Parameter] public int WidthVideo { get; set; } = 320;
    [Parameter] public int HeigthVideo { get; set; } = 320;
    [Parameter] public bool ConRecorder { get; set; } = false;
    [Parameter] public bool ConControls { get; set; } = false;

    [Parameter] public EventCallback<OnVideoRecordedArgs> OnVideoRecorded { get; set; }

    private bool _inregistrazione = false;

    string? _notifica;

    System.Timers.Timer? _timer;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _timer = new System.Timers.Timer(10000)
            {
                AutoReset = false,
                Enabled = false
            };
        _timer.Elapsed += async(source, e) => 
        {
            _timer.Enabled = false;
            if (_inregistrazione && _JScript!=null)
            {
                await _JScript.InvokeVoidAsync("pressbutton", _stopbutton);
            }
        };


    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JScript = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/TakeOffVideo.Library/VideoMarker/VideoMarker.razor.js");
            _reference = DotNetObjectReference.Create(this);

            await _JScript.InvokeVoidAsync("SettaControlsVideo", _video, ConControls);

            await _JScript.InvokeVoidAsync("InitKeyboard", _stopbutton);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Url != null && _JScript!=null)
        {
            await _JScript.InvokeVoidAsync("caricavideo", _video, Url);

            _logger.Info($"carica video {Url}");
        }
    }

    public async Task SetVideo(string url)
    {
        Url = url;

        if (Url != null && _JScript != null)
        {
            await _JScript.InvokeVoidAsync("caricavideo", _video, Url);

            _logger.Info($"carica video2 {Url}");
        }

    }

    private void MostraLinea()
    {
        _lineavisibile = !_lineavisibile;
    }

    private async Task Move(string direction, int pixels)
    {
        if (_JScript == null)
            return;


        await _JScript.InvokeVoidAsync("move", direction, _container, _linea, pixels);
    }

    public async Task StartVideo(string camera)
    {
        if (_JScript == null)
            return;
        _cameraselected = camera;

        _logger.Info($"Inizio video {camera}");

        await _JScript.InvokeVoidAsync("startVideo", _video, camera);
    }


    string? _cameraselected;



    private async Task OnRegistra()
    {
        if (_timer != null)
            _timer.Enabled = false;

        if (_JScript == null || string.IsNullOrEmpty(_cameraselected))
        {
            _notifica = "Selezionare una Videocamera";
            return;
        }
        _notifica = null;



        _inregistrazione = !_inregistrazione;

        if (_inregistrazione)
        {
            //_messaggio = "Registrazione in corso";

            _logger.Info($"Inizio Registrazione");

            await _JScript.InvokeVoidAsync("StartRec", _video, _stopbutton, _cameraselected, _reference);
            if (_timer != null)
            {

                _timer.Enabled = true;
            }

        }

    }


    [JSInvokable]
    public async Task SalvaUrlVideo(string url, string tipo)
    {
        _logger.Info($"SalvaUrlVideo {url}");
        await OnVideoRecorded.InvokeAsync(new OnVideoRecordedArgs(url, tipo));


    }


    [JSInvokable]
    public async Task ReportJS(string msg)
    {
        _logger.Info($"DaJS {msg}");

       

    }


    void DelNotification()
    {
        _notifica = null;
    }


    void IDisposable.Dispose() => _reference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JScript is not null)
        {
            await _JScript.DisposeAsync();
        }
    }

}
