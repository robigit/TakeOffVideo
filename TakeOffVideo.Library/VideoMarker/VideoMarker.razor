@using Microsoft.JSInterop

@inject IJSRuntime JS

@implements IAsyncDisposable
@implements IDisposable


<div class="container">
    <div class="vmcontainer" @ref="_container" >
        <div class="vmvideo">
            <video controls width="@WidthVideo" height="@HeigthVideo" @ref="_video" />
        </div>

        @if (_lineavisibile)
        {
            <div class="vmlinea" @ref="_linea"></div>
        }
    </div>


    <div class="buttons are-small">
        <button class="button" @onclick="@(() => MostraLinea())">
            @_textlinea
        </button>
        @if (_lineavisibile)
        {
            <button class="button" @onclick="@(() => Move("sx", 10))">
                <span class="icon is-small">
                    <i class="fas fa-angles-left"></i>
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("sx", 1))">
                <span class="icon is-small">
                    <i class="fas fa-chevron-left"></i>
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("dx", 1))">
                <span class="icon is-small">
                    <i class="fas fa-chevron-right"></i>
                </span>
            </button>

            <button class="button" @onclick="@(() => Move("dx", 10))">
                <span class="icon is-small">
                    <i class="fas fa-angles-right"></i>
                </span>
            </button>
        }
    </div>

    @if (ConRecorder)
    {
        <p class="buttons">
            <button @ref="_stopbutton" class="button is-fullwidth   @(_inregistrazione ? "is-danger" : "is-primary")"
        @onclick="OnRegistra">
                <span>    
                    @(
                        _inregistrazione ? "Salva" : "Registra"
                        )
                </span>
            </button>
@if(_inregistrazione)
{
            <progress class="progress is-danger" max="100">30%</progress>
}
        </p>
    }
</div>



@code {

    private bool _lineavisibile = true;

    private string _textlinea => _lineavisibile ? "Nascondi Linea" : "Mostra Linea";

    private IJSObjectReference? _JScript;
    private DotNetObjectReference<VideoMarker>? _reference;

    private ElementReference _video;
    private ElementReference _container;
    private ElementReference _linea;

    private ElementReference _stopbutton;

    [Parameter] public string? Url { get; set; }
    [Parameter] public int WidthVideo { get; set; } = 320;
    [Parameter] public int HeigthVideo { get; set; } = 320;
    [Parameter] public bool ConRecorder { get; set; } = false;

    [Parameter] public EventCallback<string> OnVideoRecorded { get; set; }

    private bool _inregistrazione = false;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JScript = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/TakeOffVideo.Library/VideoMarker/VideoMarker.razor.js");
            _reference = DotNetObjectReference.Create(this);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Url != null && _JScript!=null)
        {
            await _JScript.InvokeVoidAsync("caricavideo", _video, Url);
        }
    }

    private void MostraLinea()
    {
        _lineavisibile = !_lineavisibile;
    }

    private async Task Move(string direction, int pixels)
    {
        if (_JScript == null)
            return;


        await _JScript.InvokeVoidAsync("move", direction, _container, _linea, pixels);
    }

    public async Task StartVideo(string camera)
    {
        if (_JScript == null)
            return;
        _cameraselected = camera;
        await _JScript.InvokeVoidAsync("startVideo", _video, camera);
    }


    string? _cameraselected;


    private async Task OnRegistra()
    {

        if (_JScript == null || string.IsNullOrEmpty(_cameraselected))
        {
            return;
        }


        _inregistrazione = !_inregistrazione;

        if (_inregistrazione)
        {
            //_messaggio = "Registrazione in corso";

            await _JScript.InvokeVoidAsync("StartRec", _video, _stopbutton, _cameraselected, _reference);
        }
        else
        {
            //_messaggio = "-";
        }

    }


    [JSInvokable]
    public async Task SalvaUrlVideo(string url)
    {
        await OnVideoRecorded.InvokeAsync(url);


    }


    void IDisposable.Dispose() => _reference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JScript is not null)
        {
            await _JScript.DisposeAsync();
        }
    }

}
