
@using Microsoft.JSInterop
@using TakeOffVideo.Library.ModalDialog
@using TakeOffVideo.Library.TOVFileManagerNS;


@inject IJSRuntime JS

@implements IAsyncDisposable
@implements IDisposable

@inject TOVFileManager filemanager

@inject IStringLocalizer<LangResources> Loc

<div class="columns">
    <div class="column is-4 ">

        <label class="label is-small">@Loc["DownloadFolder"]</label>
        <div class="field has-addons">
            @*    <p class="control">
            <label class="label">Cartella download</label>
            </p>*@
            <p class="control">
                <input class="input is-small" readonly value="@NomeCartella">
            </p>
            <div class="control">
                <a class="button is-primary is-small" @onclick="GetDir">
                    <span class="icon is-small">
                        <img src="image/folder24.png">
                    </span>
                </a>
            </div>
        </div>
    </div>

    <div class="column">
        <label class="label is-small">@Loc["Selezionare la telecamera"]</label>
        <div class="field has-addons">
            <div class="control is-expanded  has-icons-left">

                <div class="select is-fullwidth is-small">
                    <select id="Dispositivo" @onchange="@OnLocalCameraSelected">

                
                        @if (_devices != null && _devices.Any())
                        {
                            <option value="">@Loc["Seleziona"]</option>
                            @foreach (var disp in _devices)
                            {
                                <option value="@disp.ID">@disp.Label</option>
                            }
                        }
                        else
                        {
                            <option value="">@Loc["Premere aggiorna per cercare"]</option>
                        }

                    </select>
             </div>
            <div class="icon is-small is-left">
            
                    <img src="image/video24.png">
            </div>
            </div>
            <div class="control">
                <a class="button is-primary is-small" @onclick="GetDevices">
                    <span class="icon is-small">
                        <img src="image/refresh24.png">
                    </span>
                </a>
            </div>
    

</div>

</div>
</div>



@if(!string.IsNullOrWhiteSpace(TestoDialog))
{
    <ModalDialog Text="@TestoDialog" Title=@Loc["Attenzione"] OnClose="ChiudiDialog"  />
}

@code {
    private string? TestoDialog;

    private void MostraDialog(string testo)
    {
        TestoDialog = testo;
        StateHasChanged();
    }

    private void ChiudiDialog(bool _)
    {
        TestoDialog = null;
    }

    private IJSObjectReference? _JScript;
    private DotNetObjectReference<CameraSelector>? _reference;

    [Parameter] public EventCallback<string> OnCameraSelected { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JScript = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/TakeOffVideo.Library/CameraSelector/CameraSelector.razor.js");
            _reference = DotNetObjectReference.Create(this);
        }
    }


    private async Task OnLocalCameraSelected(ChangeEventArgs e)
    {
        if(e?.Value != null)
            await OnCameraSelected.InvokeAsync(e?.Value.ToString());

    }

    private async Task GetDevices()
    {

        _devices?.Clear();
        if (_JScript != null)
            await _JScript.InvokeVoidAsync("ListaDevices", _reference, "ElencoDevice");

    }

    List<CameraDevice>? _devices;


    [JSInvokable]
    public void ElencoDevice(List<CameraDevice> elenco)
    {
        _devices = elenco.Where(d => !string.IsNullOrEmpty(d.ID) && d.Kind.StartsWith("video")).ToList();
        StateHasChanged();
    }

    void IDisposable.Dispose() => _reference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JScript is not null)
        {
            await _JScript.DisposeAsync();
        }
    }

    string NomeCartella = "<Download>";
    private async Task GetDir()
    {

        try
        {
            var dir = await filemanager.ShowDirectoryPicker();
            if (dir != null)
            {
                if (dir.Tipo == TOVFileManager.TipoScelta.Ok)
                    NomeCartella = dir.Nome;
                else
                {
                    if (dir.Tipo == TOVFileManager.TipoScelta.NotSupported)
                        MostraDialog(Loc["FolderNotSupported"]);

                }
            }
        }
        catch(Exception e)
        {
            MostraDialog($"{e} {e.Message}");
        }
    }


}