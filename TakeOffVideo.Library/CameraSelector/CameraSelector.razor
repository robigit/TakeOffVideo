@using Microsoft.JSInterop

@inject IJSRuntime JS

@implements IAsyncDisposable
@implements IDisposable




<label class="label">Selezionare la telecamera</label>
<div class="field has-addons">
    <div class="control is-expanded  has-icons-left">
         
            <div class="select is-fullwidth">
            <select id="Dispositivo" @onchange="@OnLocalCameraSelected">

                <option value="">Seleziona</option>
                @if (_devices != null)
                {
                    @foreach (var disp in _devices)
                    {
                        <option value="@disp.ID">@disp.Label</option>
                    }
                }

            </select>
     </div>
    <div class="icon is-small is-left">
            <i class="fas fa-video"></i>
    </div>
    </div>
    <div class="control">
        <a class="button is-info" @onclick="GetDevices">
            Aggiorna
        </a>
    </div>
</div>

@code {

    private IJSObjectReference? _JScript;
    private DotNetObjectReference<CameraSelector>? _reference;

    [Parameter] public EventCallback<string> OnCameraSelected { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JScript = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/TakeOffVideo.Library/CameraSelector/CameraSelector.razor.js");
            _reference = DotNetObjectReference.Create(this);
        }
    }


    private async Task OnLocalCameraSelected(ChangeEventArgs e)
    {
        if(e?.Value != null)
            await OnCameraSelected.InvokeAsync(e?.Value.ToString());

    }

    private async Task GetDevices()
    {

        _devices?.Clear();
        if (_JScript != null)
            await _JScript.InvokeVoidAsync("ListaDevices", _reference, "ElencoDevice");

    }

    List<CameraDevice>? _devices;


    [JSInvokable]
    public void ElencoDevice(List<CameraDevice> elenco)
    {
        _devices = elenco.Where(d => !string.IsNullOrEmpty(d.ID) && d.Kind.StartsWith("video")).ToList();
        StateHasChanged();
    }

    void IDisposable.Dispose() => _reference?.Dispose();

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JScript is not null)
        {
            await _JScript.DisposeAsync();
        }
    }


}