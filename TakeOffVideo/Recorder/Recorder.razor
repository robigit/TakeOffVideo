@using Microsoft.JSInterop
@implements IAsyncDisposable
@implements IDisposable

@inject IJSRuntime JS




<h3>Recorder</h3>

<label class="label">Selezionare la telecamera</label>
<div class="field has-addons">
    
    <div class="control">

        <div class="select">
            <select id="Dispositivo" @bind="@_selected">

                <option value="">Seleziona</option>
                @foreach (var disp in _devices)
                {
                    <option value="@disp.ID">@disp.Label</option>
                }


            </select>
        </div>
        <p class="help is-danger">Selezionare la telecamera</p>
    </div>
    <div class="control">
        <a class="button is-info" @onclick="GetDevices">
            Aggiorna
        </a>
    </div>
</div>

@code {

    private IJSObjectReference? _JSRecorder;

    string _selected;
    List<Device> _devices = new List<Device>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JSRecorder = await JS.InvokeAsync<IJSObjectReference>("import", "./scripts/Recorder.js");
        }
    }

    private async Task GetDevices()
    {

        _devices.Clear();
        
        await _JSRecorder.InvokeVoidAsync("ListaDevices", DotNetObjectReference.Create(this), "AggungiDevice", "EndAggiorna");

    }

    [JSInvokable]
    public void AggungiDevice(string tipo, string label, string id)
    {
        Console.WriteLine($"{tipo} {label} {id}");

        if (tipo.StartsWith("video"))
            _devices.Add(new Device { Label = $"1 {label}", ID = id });
    }

    [JSInvokable]
    public void EndAggiorna()
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        //_JSRecorder?.Dispose();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JSRecorder is not null)
        {
            await _JSRecorder.DisposeAsync();
        }
    }
}
