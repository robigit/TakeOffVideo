@using Microsoft.JSInterop
@implements IAsyncDisposable
@implements IDisposable

@inject IJSRuntime JS



<div class="box">
<h2>Registrazione</h2>
</div>

<div class="field is-horizontal">
  
  <div class="field-body">
    <div class="field">
      <p class="control is-expanded">
          <div class="select">

                    <select @onchange="SelectedTurnoChanged">
                @for(int i=1; i<7; ++i)
                {
                    <option value="@i">Turno @i</option>
               
                }
            </select>
              
         </div>
      </p>
    </div>
    <div class="field">
      <p class="control is-expanded has-icons-left has-icons-right">
                <input class="input is-success" placeholder="Pettorale" @bind="_pettorale" />
        <span class="icon is-small is-left">
          <i class="fas fa-envelope"></i>
        </span>
        <span class="icon is-small is-right">
          <i class="fas fa-check"></i>
        </span>
      </p>
    </div>
  </div>
</div>



<label class="label">Selezionare la telecamera</label>
<div class="field has-addons">
    <div class="control is-expanded">
         
            <div class="select is-fullwidth">
                <select id="Dispositivo" @onchange="@OnCameraSelected">

                    <option value="">Seleziona</option>
                    @foreach (var disp in _devices)
                    {
                        <option value="@disp.ID">@disp.Label</option>
                    }


                </select>
            </div>

    </div>
    <div class="control">
        <a class="button is-info" @onclick="GetDevices">
            Aggiorna
        </a>
    </div>
</div>

<div class="notification @(_inregistrazione ? "is-danger" : "")">
    <video id="videoPlayer" width="320" height="320" />
</div>

<button id="recbutton" class="button is-fullwidth   @(_inregistrazione ? "is-danger" : "is-primary")"
        @onclick="OnRegistra">
    @(_inregistrazione ? "Salva" : "Registra")
 </button>
<div class="block">
    <p class="is-size-7">@_messaggio</p>
</div>

@code {

    private IJSObjectReference? _JSRecorder;
    private DotNetObjectReference<Recorder>? _reference;

    List<Device> _devices = new List<Device>();

    private string _messaggio = "-";

    private string _pettorale;

    private int _turno=1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _JSRecorder = await JS.InvokeAsync<IJSObjectReference>("import", "./script/recorderj.js");
            _reference = DotNetObjectReference.Create(this);

        }
    }

    private async Task GetDevices()
    {

        _devices.Clear();
        if(_JSRecorder != null)
            await _JSRecorder.InvokeVoidAsync("ListaDevices", _reference, "AggungiDevice", "EndAggiorna");

    }

    [JSInvokable]
    public void AggungiDevice(string tipo, string label, string id)
    {
        Console.WriteLine($"{tipo} {label} {id}");

        if (tipo.StartsWith("video"))
            _devices.Add(new Device { Label = $"{_devices.Count+1} {label}", ID = id });
    }

    [JSInvokable]
    public void EndAggiorna()
    {
        StateHasChanged();
    }

    string? _cameraselected;

    private async Task OnCameraSelected(ChangeEventArgs e)
    {
        _cameraselected = null;
        if (_JSRecorder==null || e==null || string.IsNullOrEmpty(e.Value.ToString()))
        {
            return;
        }

        _cameraselected = e.Value.ToString();

        await _JSRecorder.InvokeVoidAsync("startVideo", "videoPlayer", _cameraselected);
    }


    private void SelectedTurnoChanged(ChangeEventArgs e)
    {
        int.TryParse(e?.Value?.ToString(), out _turno);
    }


    bool _inregistrazione = false;

    // da mettere nei parametrri
    List<string> _urls = new List<string>();

    private async Task OnRegistra()
    {
        _inregistrazione = !_inregistrazione;

        if (_inregistrazione)
        {
            _messaggio = "Registrazione in corso";

            await _JSRecorder.InvokeVoidAsync("StartRec", "videoPlayer", "recbutton", _cameraselected, _reference);
        }
        else
        {
            _messaggio = "-";
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SalvaUrlVideo(string url)
    {

        if (!_urls.Contains(url))
        {
            _urls.Add(url);

            // download

            var nome = $"{DateTime.Today.ToString("yyyyMMdd")}_{DateTime.Now.ToString("HH-mm-ss")}_{_turno}_{_pettorale}.webm";

            await _JSRecorder.InvokeVoidAsync("downloadBlob", url, nome);

            StateHasChanged();

        }
    }


    void IDisposable.Dispose()
    {
        //_JSRecorder?.Dispose();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_JSRecorder is not null)
        {
            await _JSRecorder.DisposeAsync();
        }
    }
}
