@using Microsoft.JSInterop
@using TakeOffVideo.Library.CameraSelector
@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Library.VideoFileManager

@inject IVideoFileManager videofilemanager


<h1 class="title is-2">
    Registrazione
</h1>

<CameraSelector OnCameraSelected="OnCameraSelected2" />

<VideoMarker @ref="_videoMarker" WidthVideo="320" HeigthVideo="320"
             ConRecorder="true" OnVideoRecorded="SalvaUrlVideo" />

<div class="container">

<div class="field is-horizontal">
  
  <div class="field-body">
    @*<div class="field">*@
        <p class="control  has-icons-left">
          <div class="select">

             <select @onchange="SelectedTurnoChanged">
                <option value="0">Prove</option>
                @for(int i=1; i<7; ++i)
                {
                    <option value="@i">Turno @i</option>
               
                }
            </select>
              
         </div>
                <div class="icon is-small is-left">
                   <img src="image/turno24.png">
                </div>

      </p>
    @*</div>*@
    <div class="field">
      <p class="control is-expanded has-icons-left">
                <input class="input is-success" placeholder="Pettorale" @bind="_pettorale" />
        <span class="icon is-small is-left">
         
                <img src="image/number24.png">
        </span>

        @*<figure class="image is-48x48">
            <img src="image/number.png">
        </figure>*@
       
      </p>
    </div>
  </div>
</div>



</div>






<div class="block">
    <p class="is-size-7">@_messaggio</p>
</div>





@code {

    //private IJSObjectReference? _JSRecorder;
    //private DotNetObjectReference<Recorder>? _reference;

    //List<Device> _devices = new List<Device>();

    private string _messaggio = "-";

    private string? _pettorale;

    private int _turno=0;

    VideoMarker? _videoMarker;


    string? _cameraselected;

    

    private void OnCameraSelected2(string camera)
    {
        _cameraselected = camera;
        if (_cameraselected != null)
            _videoMarker?.StartVideo(_cameraselected);
    }

    private void SelectedTurnoChanged(ChangeEventArgs e)
    {
        int.TryParse(e?.Value?.ToString(), out _turno);
    }




    //[JSInvokable]
    public async Task SalvaUrlVideo(OnVideoRecordedArgs e)
    {

        await videofilemanager.AggiungiNuovo(e.Url,e.Tipo, _turno, _pettorale);
        StateHasChanged();

    }

    



}
