@using Microsoft.JSInterop
@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Services
@*@implements IAsyncDisposable
@implements IDisposable*@

@*@inject IJSRuntime JS*@
@inject IVideoFileManager videofilemanager


<h1 class="title is-2">
    Registrazione
</h1>

<div class="field is-horizontal">
  
  <div class="field-body">
    @*<div class="field">*@
        <p class="control  has-icons-left">
          <div class="select">

             <select @onchange="SelectedTurnoChanged">
                @for(int i=1; i<7; ++i)
                {
                    <option value="@i">Turno @i</option>
               
                }
            </select>
              
         </div>
                <div class="icon is-small is-left">
                    <i class="fas fa-list-ol"></i>
                </div>

      </p>
    @*</div>*@
    <div class="field">
      <p class="control is-expanded has-icons-left">
                <input class="input is-success" placeholder="Pettorale" @bind="_pettorale" />
        <span class="icon is-small is-left">
          <i class="fas fa-solid fa-hashtag"></i>
        </span>
       
      </p>
    </div>
  </div>
</div>

<TakeOffVideo.Library.CameraSelector.CameraSelector OnCameraSelected="OnCameraSelected2" />



<VideoMarker @ref="_videoMarker" WidthVideo="320" HeigthVideo="320"
        ConRecorder="true" OnVideoRecorded="SalvaUrlVideo"/>



<div class="block">
    <p class="is-size-7">@_messaggio</p>
</div>

@code {

    //private IJSObjectReference? _JSRecorder;
    //private DotNetObjectReference<Recorder>? _reference;

    //List<Device> _devices = new List<Device>();

    private string _messaggio = "-";

    private string? _pettorale;

    private int _turno=1;

    VideoMarker? _videoMarker;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        _JSRecorder = await JS.InvokeAsync<IJSObjectReference>("import", "./script/recorderj.js");
    //        _reference = DotNetObjectReference.Create(this);

    //    }
    //}

    //private async Task GetDevices()
    //{

    //    _devices.Clear();
    //    if(_JSRecorder != null)
    //        await _JSRecorder.InvokeVoidAsync("ListaDevices", _reference, "AggungiDevice", "EndAggiorna");

    //}

    //[JSInvokable]
    //public void AggungiDevice(string tipo, string label, string id)
    //{
    //    Console.WriteLine($"{tipo} {label} {id}");

    //    if (tipo.StartsWith("video"))
    //        _devices.Add(new Device { Label = $"{_devices.Count+1} {label}", ID = id });
    //}

    //[JSInvokable]
    //public void EndAggiorna()
    //{
    //    StateHasChanged();
    //}

    string? _cameraselected;


    private void OnCameraSelected2(string camera)
    {
        _cameraselected = camera;
        if (_cameraselected != null)
            _videoMarker?.StartVideo(_cameraselected);
    }

    //private async Task OnCameraSelected(ChangeEventArgs e)
    //{
    //    _cameraselected = null;
    //    if (_JSRecorder==null || e==null || string.IsNullOrEmpty(e.Value.ToString()))
    //    {
    //        return;
    //    }

    //    _cameraselected = e.Value.ToString();
    //    if(_cameraselected!=null)
    //        _videoMarker?.StartVideo(_cameraselected);

    //}


    private void SelectedTurnoChanged(ChangeEventArgs e)
    {
        int.TryParse(e?.Value?.ToString(), out _turno);
    }


    

    //[JSInvokable]
    public async Task SalvaUrlVideo(string url)
    {
 
        await videofilemanager.AggiungiNuovo(url, _turno, _pettorale);
        StateHasChanged();
       
    }


    //void IDisposable.Dispose()
    //{
    //    if(_reference !=null)
    //        _reference.Dispose();
    //}

    //async ValueTask IAsyncDisposable.DisposeAsync()
    //{
    //    if (_JSRecorder is not null)
    //    {
    //        await _JSRecorder.DisposeAsync();
    //    }
    //}




}
