@using Microsoft.Extensions.Localization;
@using TakeOffVideo.Library.TOVFileManagerNS;
@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Library.VideoUploader
@using TakeOffVideo.Library.VideoFileManager

@using Localization

@inject IStringLocalizer<LangResources> Loc

@inject TOVFileManager videofilemanager

@implements IDisposable

<h1 class="title is-2">
    @Loc["Analisi"]
</h1>

@*@if (false && string.IsNullOrEmpty(_videoattuale.Url))
{
    <p class="has-text-centered">
        <figure class="image is-16by9">
            <img src="image/tovlogo.png">
        </figure>
    </p>
}*@

<VideoMarker OnImageRecorded="SalvaImmagine" ConImageRec="ConImageRec"  WidthVideo="640" HeigthVideo="640" ConControls=true @ref="_videoMarker" />

<div class="columns">
    <div class="column">
        <VideoFileManagerTable OnPlayVideo="OnVideoSelected" />
    </div>
    <div class="column is-one-fifth">
        <VideoUploader Testo=@Loc["Carica…"] OnVideoUploaded="OnVideoUploaded" />
    </div>

</div>





@code {
    VideoMarker? _videoMarker;

    bool ConImageRec = false;

    protected override void OnInitialized()
    {
        ConImageRec = videofilemanager.GetNomeDir() != null;
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            videofilemanager.OnNuovo += OnNuovo;
        }
    }

    public void Dispose()
    {
        videofilemanager.OnNuovo -= OnNuovo;
    }

    //string? _urlattuale;

    VideoFile? _videoattuale = null;


    private async Task OnVideoSelected(VideoFile video)
    {
        _videoattuale = video;
        if (_videoattuale != null)
        {

            Console.WriteLine($"OnVideoSelected {_videoattuale.Url}");
            if(_videoMarker!=null)
                await _videoMarker.SetVideo(_videoattuale.Url);
        }

    }



    private async Task OnNuovo(VideoFile video)
    {
        _videoattuale = video;

        Console.WriteLine($"Caricato un video nuovo {_videoattuale.Url}");

        await _videoMarker.SetVideo(_videoattuale.Url, video.Durata);
        //StateHasChanged();
        //await Task.CompletedTask;
    }

    private async Task OnVideoUploaded(OnVideoUploadesArgs e)
    {
        var ret = await videofilemanager.AggiungiDaFile(e.Url, e.Nomefile);
    }

    private async Task SalvaImmagine(string url)
    {
        string nome = "Image.jpg";
        if(_videoattuale!=null)
            nome = _videoattuale.SoloNome + ".jpg";

        await videofilemanager.SalvaFileSuCartellaImg(nome, url);
    }
    
}
