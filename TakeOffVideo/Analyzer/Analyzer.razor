@using TakeOffVideo.Library.RLogger;
@using TakeOffVideo.Library.TOVFileManagerNS;
@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Library.VideoUploader
@using TakeOffVideo.Library.VideoFileManager


@inject TOVFileManager videofilemanager
@inject IRLogger _logger

@implements IDisposable

<h1 class="title is-2">
    Analisi
</h1>

@if(false && string.IsNullOrEmpty(_urlattuale))
{
    <p class="has-text-centered">
        <figure class="image is-16by9">
            <img src="image/tovlogo.png">
        </figure>
    </p>
}

<VideoMarker  WidthVideo="640" HeigthVideo="640" ConControls=true @ref="_videoMarker" />

<div class="columns">
    <div class="column">
        <VideoFileManagerTable OnPlayVideo="OnVideoSelected" />
    </div>
    <div class="column is-one-fifth">
        <VideoUploader OnVideoUploaded="OnVideoUploaded" />
    </div>

</div>





@code {
    VideoMarker? _videoMarker;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            videofilemanager.OnNuovo += OnNuovo;

        }
    }

    public void Dispose()
    {
         videofilemanager.OnNuovo -= OnNuovo;
    }

    string? _urlattuale;

    private async Task OnVideoSelected(VideoFile video)
    {

        if(video != null)
        {
            _urlattuale =  video.Url;

            _logger.Info($"OnVideoSelected {_urlattuale}");
            if(_videoMarker!=null)
                await _videoMarker.SetVideo(_urlattuale);
        }

    }

    private async Task OnNuovo(VideoFile video)
    {
        if(video!=null)
            _urlattuale = video.Url;

        _logger.Info($"Caricato un video nuovo {_urlattuale}");

        await _videoMarker.SetVideo(_urlattuale);
        //StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnVideoUploaded(OnVideoUploadesArgs e)
    {
        var ret = await videofilemanager.AggiungiDaFile(e.Url, e.Nomefile);


    }

    
}
