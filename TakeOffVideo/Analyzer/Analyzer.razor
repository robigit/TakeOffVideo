@using TakeOffVideo.Library.RLogger;
@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Library.VideoUploader
@using TakeOffVideo.Library.VideoFileManager


@inject IVideoFileManager videofilemanager
@inject IRLogger _logger


<h1 class="title is-2">
    Analisi
</h1>

@if(false && string.IsNullOrEmpty(_urlattuale))
{
    <p class="has-text-centered">
        <figure class="image is-16by9">
            <img src="image/tovlogo.png">
        </figure>
    </p>
}

<VideoMarker Url="@_urlattuale" WidthVideo="640" HeigthVideo="640" ConControls=true />

<div class="columns">
    <div class="column">
        <VideoFileManagerTable OnPlayVideo="OnVideoSelected" />
    </div>
    <div class="column is-2">
        <VideoUploader OnVideoUploaded="OnVideoUploaded" />
    </div>

</div>





@code {



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            videofilemanager.RegistraOnNuovo(OnNuovo);

        }
    }

    string? _urlattuale;

    private void OnVideoSelected(VideoFile video)
    {
                
        if(video != null)
            _urlattuale =  video.Url;

    }

    private async Task OnNuovo(VideoFile video)
    {
        if(video!=null)
            _urlattuale = video.Url;

        _logger.Info($"Caricato un video nuovo {_urlattuale}");

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnVideoUploaded(OnVideoUploadesArgs e)
    {
        var ret = await videofilemanager.AggiungiDaFile(e.Url, e.Nomefile);


    }

    
}
