@using TakeOffVideo.Library.VideoMarker
@using TakeOffVideo.Services


@inject IVideoFileManager videofilemanager



<h1 class="title is-2">
    Analisi
</h1>

<p class="control  has-icons-left">
    <div class="select is-fullwidth">

        <select @onchange="OnVideoSelected">
            
            @foreach(var v in videofilemanager.GetElenco().ToList())
            {
                <option value="@v.ID">@v.ToString()</option>
            }

        </select>

    </div>
    <div class="icon is-small is-left">
        <i class="fas fa-video"></i>

        
    </div>

</p>


<VideoMarker Url="@_urlattuale" WidthVideo="640" HeigthVideo="640" />

@*<br>
<p class="has-text-centered">
    <figure class="image is-16by9">
        <img src="image/tovlogo.png">
    </figure>
</p>*@

@code {



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            videofilemanager.RegistraOnNuovo(OnNuovo);

        }
    }

    string? _urlattuale;

    private void OnVideoSelected(ChangeEventArgs e)
    {
        if (e?.Value is null )
            return;

        if(int.TryParse(e.Value.ToString(), out int id))
        {
            var video = videofilemanager.GetById(id);


            if(video != null)
                _urlattuale =  video.Url;
        }
    }

    private async Task OnNuovo(VideoFile video)
    {
        if(video!=null)
            _urlattuale = video.Url;



        StateHasChanged();
    }

    
}
