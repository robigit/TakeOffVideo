@page "/opzioni"
@using System.Text;
@using TakeOffVideo.Library.CameraSelector
@using TakeOffVideo.Library.DBFReader;
@using TakeOffVideo.Library.Global;
@using WebStorageManagement.Models;

@inject IWebStorageService webstorage

@inject GlobalObjects go

<h3 class="title is-3">Opzioni</h3>



<div class="card">
    <header class="card-header">
        <p class="card-header-title">
            Tipo Registrazione
        </p>
        
    </header>
    <div class="card-content">
        <div class="content">
            Nella modalita' a registrazione singola bisogna premere il bottone sia per far partire che per salvare il file.
            <br/>
            Nella modalita' a registrazione continua invece il programma è sempre in registrazione e si preme il bottone per salvare
            (in questa modalità i video sono molto più lunghi). Sperimentale.
        </div>



        <div class="control">
            <label class="radio">
                <input type="radio" name="registrazione" checked="@(!RegistrazioneContinua)"
                       @onchange="Cambia">
                Registrazione singola
            </label>
            <label class="radio">
                <input type="radio" name="registrazione" checked="@(RegistrazioneContinua)"
                    @onchange="Cambia" >
                Registrazione continua
            </label>
        </div>
    </div>
</div>

<br/>

<div class="card">
    <header class="card-header">
        <p class="card-header-title">
            Importazione iscritti da WISE
        </p>
    </header>
    <div class="card-content">
        Caricare il file degli iscritti, tipo .dbf
    </div>


    <div class="content">
        <div class="file has-name">
            <label class="file-label">

                <InputFile class="file-input" OnChange="@OnInputFileChange" accept=".dbf" />

                @*<input class="file-input" type="file" name="resume">*@

                <span class="file-cta">
                    
                    <span class="file-label">
                        Seleziona file Wise…
                    </span>
                </span>
                <span class="file-name">
                    @go.NomeFileDbf
                </span>
            </label>
        </div>

        
    </div>
    

    @if (go.Atleti != null)
    {
        <div class="content">
            <div class="select">
                    <select @onchange="SelezionaGara" >
                        <option>Seleziona la gara</option>
                    @foreach(var gara in go.Atleti.Select(a => $"{a.CODGARA} - {a.INTESTAZIO}").Distinct())
                    {
                        <option  >@gara</option>
                    
                    }
                </select>
            </div>
            @if (go.Atleti != null)
            {
                <div class="select">
                    <select>
                        @foreach (var atl in go.Atleti.Where(a => a.CODGARA == go.GaraSel && a.CONFERMA == "S")
                       .OrderBy(a => a.PettNum))
                        {
                            <option>@atl</option>

                        }
                    </select>
                </div>
            }

            <button class="button" @onclick="PulisciAtleti"  >Pulisci</button>

        </div>


    }

</div>

<br />

<div class="card">
    <header class="card-header">
        <p class="card-header-title">
            Selezione camera di Default
        </p>
    </header>
    <div class="card-content">
        Selezionare la camera che verrà caricata automaticamente all'avvio
    </div>


    <div class="content">
        
        <div class="columns">
            
            <div class="column is-6">
        <CameraSelector OnCameraSelected="OnCameraSelected" ConCartella="false" />
            </div>
            
        </div>
        
    </div>
</div>


@code {
    bool RegistrazioneContinua;


    private async Task Cambia()
    {
        RegistrazioneContinua = !RegistrazioneContinua;
        await webstorage.LocalStorage.Save("TipoRec", RegistrazioneContinua.ToString());

    }


    protected override async Task OnInitializedAsync()
    {
        RegistrazioneContinua = await webstorage.LocalStorage.Read("TipoRec") == "True";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var ID = await webstorage.LocalStorage.Read("IDCameraDefault");

        }
    }


    private void SelezionaGara(ChangeEventArgs e)
    {
        if (e?.Value != null)
        {
            var pz = e.Value.ToString().Split('-', StringSplitOptions.TrimEntries);
            go.GaraSel = pz[0];
        }
    }

    private void PulisciAtleti()
    {
        go.Atleti = null;
        go.GaraSel = null;
        go.NomeFileDbf = null;
        StateHasChanged();
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        go.NomeFileDbf = e.File.Name;
        using (var memstream = new MemoryStream())
        {
            await e.File.OpenReadStream().CopyToAsync(memstream);

            //go.Atleti = (await DBFReader.GetFieldNames(memstream)).Select(n=> new AtletaWise { PETTO = "0", CODGARA = n, NOMINATIVO = n });

            go.Atleti = await DBFReader.ReadToObject<AtletaWise>(memstream);
            StateHasChanged();
            
        }
            
        
    }

    private async void OnCameraSelected(string camera)
    {
        await webstorage.LocalStorage.Save("IDCameraDefault", camera);
        //_cameraselected = camera;
        //if (_cameraselected != null)
        //    _videoMarker?.StartVideo(_cameraselected);
    }


}
